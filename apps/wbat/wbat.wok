; wbat.wok -- warn about low battery on OpenBSD
; Copyright (C) 2020 Wolfgang JÃ¤hrling
;
; ISC License
;
; Permission to use, copy, modify, and/or distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

dec rt-syscall (any any any any any any int :: int)

def exit (int)
    [0 0 0 0 0 1 rt-syscall,]

def fork (:: int)
    [0 0 0 0 0 0 2 rt-syscall]

type fd: int

def read (fd @u8 int :: int)
    [0 0 0 3 rt-syscall]

def write (fd @u8 int :: int)
    [0 0 0 4 rt-syscall]

for O-RDONLY {0}
def open (@u8 int :: fd)
    [0 0 0 0 5 rt-syscall (int::fd)]

def close (fd :: int)
    [0 0 0 0 0 6 rt-syscall]

; ioctl with one arg
def ioctl-1 (fd int any :: int)
    [0 0 0 54 rt-syscall]

def execve (@u8 @@u8 @@u8 :: int)
    [0 0 0 59 rt-syscall]

type timespec: any
def nanosleep (@timespec @timespec :: int)
    [0 0 0 0 91 rt-syscall]

for APM-IOC-GETPOWER  {1075855619}
for APM-AC-OFF        {0}
for APM-AC-ON         {1}

; these seem rather useless
for APM-BATT-HIGH     {0}
for APM-BATT-LOW      {1}
for APM-BATT-CRITICAL {2}
for APM-BATT-CHARGING {3}
for APM-BATT-UNKNOWN  {255}

the apm-fd: int

; struct apm_power_info
type apm-power-info: any
the battery-state: u8
the ac-state:      u8
the battery-life:  u8
the spare1:        u8
the minutes-left:  u32
the spare2_1:      u32
the spare2_2:      u32
the spare2_3:      u32
the spare2_4:      u32
the spare2_5:      u32
the spare2_6:      u32

; struct timespec
the wait-seconds: int
the wait-nanoseconds: int

; struct timespec
the remain-seconds: int
the remain-nanoseconds: int

def sec>timespec (int :: @timespec)
    [wait-seconds !
     0 wait-nanoseconds !
     wait-seconds (any::@timespec)]

def remain (:: @timespec)
    [remain-seconds (any::@timespec)]

def moment ()
    [6 sec>timespec remain nanosleep,]

def apm (:: @u8 int)
    ["/dev/apm" O-RDONLY]

def buf (:: @apm-power-info)
    [battery-state (@u8::@apm-power-info)]

def getpower (fd :: fd)
    [this APM-IOC-GETPOWER buf ioctl-1,]

def fill ()
    [apm open loop:[getpower moment]]

def charging? (:: bool)
    [ac-state@ APM-AC-ON =]

def run ()
    [fill battery-state@ exit]
